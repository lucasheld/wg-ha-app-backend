version: '3'

services:
  # redis is used by app and celery to exchange background task information
  redis:
    image: redis:alpine
    restart: unless-stopped
    environment:
      REDIS_APPENDONLY: "yes"
    volumes:
      - redis:/data
    expose:
      - 6379

  # this service builds the image used by celery and app and exits afterwards
  build-app:
    image: app
    build: .

  # celery executes playbooks in the background
  # we need to pass through the ansible project path that contains the playbooks
  # and the ssh keys to connect to remote hosts
  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    restart: unless-stopped
    environment:
      ANSIBLE_PROJECT_PATH: /ansible
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
      ANSIBLE_VAULT_PASSWORD_FILE: "/.vault_key"
      ENV_FILE_LOCATION: "/.env"
    volumes:
      - /home/ansible/wg-ha-app/ansible:/ansible:ro
      - /home/ansible/.ssh:/home/abc/.ssh/:ro
      - /home/lucas/.vault_key:/.vault_key:ro
      - ./.env:/.env:ro
    user: abc
    depends_on:
      - build-app
      - redis
    command: celery --app wg_ha_backend.celery worker --loglevel=info

  # flower provides a task api for celery
  flower:
    image: app
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
      ENV_FILE_LOCATION: "/.env"
    volumes:
      - ./.env:/.env:ro
    depends_on:
      - build-app
      - redis
    command: celery --app wg_ha_backend.celery flower --persistent --loglevel=info

  # flask provides the api and forwards playbook tasks to the celery service
  flask:
    image: app
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      ANSIBLE_PROJECT_PATH: /ansible
      CELERY_BROKER_URL: redis://redis
      CELERY_RESULT_BACKEND: redis://redis
      ANSIBLE_VAULT_PASSWORD_FILE: "/.vault_key"
      ENV_FILE_LOCATION: "/.env"
      KEYCLOAK_SERVER_URL: http://keycloak:8080
      KEYCLOAK_CLIENT_ID: backend
      KEYCLOAK_SECRET_KEY: 9K2hpnL41KgG9nec3PHcJDdfZsLbd8GH
      KEYCLOAK_REALM_NAME: wg-app
    volumes:
      - /home/ansible/wg-ha-app/ansible:/ansible
      - /home/lucas/.vault_key:/.vault_key:ro
      - ./.env:/.env:ro
    depends_on:
      - build-app
      - celery
    command: gunicorn --bind 0.0.0.0:5000 'wg_ha_backend:create_app()'

  mongo:
    image: mongo

  mongo-express:
    image: mongo-express
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
    ports:
      - "8081:8081"
    depends_on:
      - mongo

  postgres:
    image: postgres
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  keycloak:
    image: quay.io/keycloak/keycloak:18.0.2
    restart: unless-stopped
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_SCHEMA: public
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    command: start-dev

volumes:
  redis:
  postgres:
